{"ast":null,"code":"const crypto = require('crypto');\n\nconst algorithm = 'aes-256-gcm';\nconst ivLength = 16;\nconst saltLength = 64;\nconst tagLength = 16;\nconst tagPosition = saltLength + ivLength;\nconst encryptedPosition = tagPosition + tagLength;\n\nfunction Cryptr(secret) {\n  if (!secret || typeof secret !== 'string') {\n    throw new Error('Cryptr: secret must be a non-0-length string');\n  }\n\n  function getKey(salt) {\n    return crypto.pbkdf2Sync(secret, salt, 100000, 32, 'sha512');\n  }\n\n  this.encrypt = function encrypt(value) {\n    if (value == null) {\n      throw new Error('value must not be null or undefined');\n    }\n\n    const iv = crypto.randomBytes(ivLength);\n    const salt = crypto.randomBytes(saltLength);\n    const key = getKey(salt);\n    const cipher = crypto.createCipheriv(algorithm, key, iv);\n    const encrypted = Buffer.concat([cipher.update(String(value), 'utf8'), cipher.final()]);\n    const tag = cipher.getAuthTag();\n    return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');\n  };\n\n  this.decrypt = function decrypt(value) {\n    if (value == null) {\n      throw new Error('value must not be null or undefined');\n    }\n\n    const stringValue = Buffer.from(String(value), 'hex');\n    const salt = stringValue.slice(0, saltLength);\n    const iv = stringValue.slice(saltLength, tagPosition);\n    const tag = stringValue.slice(tagPosition, encryptedPosition);\n    const encrypted = stringValue.slice(encryptedPosition);\n    const key = getKey(salt);\n    const decipher = crypto.createDecipheriv(algorithm, key, iv);\n    decipher.setAuthTag(tag);\n    return decipher.update(encrypted) + decipher.final('utf8');\n  };\n}\n\nmodule.exports = Cryptr;","map":{"version":3,"sources":["/Users/zihadislam/react-app/node_modules/cryptr/index.js"],"names":["crypto","require","algorithm","ivLength","saltLength","tagLength","tagPosition","encryptedPosition","Cryptr","secret","Error","getKey","salt","pbkdf2Sync","encrypt","value","iv","randomBytes","key","cipher","createCipheriv","encrypted","Buffer","concat","update","String","final","tag","getAuthTag","toString","decrypt","stringValue","from","slice","decipher","createDecipheriv","setAuthTag","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,SAAS,GAAG,aAAlB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,WAAW,GAAGF,UAAU,GAAGD,QAAjC;AACA,MAAMI,iBAAiB,GAAGD,WAAW,GAAGD,SAAxC;;AAEA,SAASG,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,MAAI,CAACA,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EAA2C;AACvC,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,WAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,WAAOZ,MAAM,CAACa,UAAP,CAAkBJ,MAAlB,EAA0BG,IAA1B,EAAgC,MAAhC,EAAwC,EAAxC,EAA4C,QAA5C,CAAP;AACH;;AAED,OAAKE,OAAL,GAAe,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACnC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,YAAM,IAAIL,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,UAAMM,EAAE,GAAGhB,MAAM,CAACiB,WAAP,CAAmBd,QAAnB,CAAX;AACA,UAAMS,IAAI,GAAGZ,MAAM,CAACiB,WAAP,CAAmBb,UAAnB,CAAb;AAEA,UAAMc,GAAG,GAAGP,MAAM,CAACC,IAAD,CAAlB;AAEA,UAAMO,MAAM,GAAGnB,MAAM,CAACoB,cAAP,CAAsBlB,SAAtB,EAAiCgB,GAAjC,EAAsCF,EAAtC,CAAf;AACA,UAAMK,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,CAACJ,MAAM,CAACK,MAAP,CAAcC,MAAM,CAACV,KAAD,CAApB,EAA6B,MAA7B,CAAD,EAAuCI,MAAM,CAACO,KAAP,EAAvC,CAAd,CAAlB;AAEA,UAAMC,GAAG,GAAGR,MAAM,CAACS,UAAP,EAAZ;AAEA,WAAON,MAAM,CAACC,MAAP,CAAc,CAACX,IAAD,EAAOI,EAAP,EAAWW,GAAX,EAAgBN,SAAhB,CAAd,EAA0CQ,QAA1C,CAAmD,KAAnD,CAAP;AACH,GAhBD;;AAkBA,OAAKC,OAAL,GAAe,SAASA,OAAT,CAAiBf,KAAjB,EAAwB;AACnC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,YAAM,IAAIL,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,UAAMqB,WAAW,GAAGT,MAAM,CAACU,IAAP,CAAYP,MAAM,CAACV,KAAD,CAAlB,EAA2B,KAA3B,CAApB;AAEA,UAAMH,IAAI,GAAGmB,WAAW,CAACE,KAAZ,CAAkB,CAAlB,EAAqB7B,UAArB,CAAb;AACA,UAAMY,EAAE,GAAGe,WAAW,CAACE,KAAZ,CAAkB7B,UAAlB,EAA8BE,WAA9B,CAAX;AACA,UAAMqB,GAAG,GAAGI,WAAW,CAACE,KAAZ,CAAkB3B,WAAlB,EAA+BC,iBAA/B,CAAZ;AACA,UAAMc,SAAS,GAAGU,WAAW,CAACE,KAAZ,CAAkB1B,iBAAlB,CAAlB;AAEA,UAAMW,GAAG,GAAGP,MAAM,CAACC,IAAD,CAAlB;AAEA,UAAMsB,QAAQ,GAAGlC,MAAM,CAACmC,gBAAP,CAAwBjC,SAAxB,EAAmCgB,GAAnC,EAAwCF,EAAxC,CAAjB;AAEAkB,IAAAA,QAAQ,CAACE,UAAT,CAAoBT,GAApB;AAEA,WAAOO,QAAQ,CAACV,MAAT,CAAgBH,SAAhB,IAA6Ba,QAAQ,CAACR,KAAT,CAAe,MAAf,CAApC;AACH,GAnBD;AAoBH;;AAEDW,MAAM,CAACC,OAAP,GAAiB9B,MAAjB","sourcesContent":["const crypto = require('crypto');\n\nconst algorithm = 'aes-256-gcm';\nconst ivLength = 16;\nconst saltLength = 64;\nconst tagLength = 16;\nconst tagPosition = saltLength + ivLength;\nconst encryptedPosition = tagPosition + tagLength;\n\nfunction Cryptr(secret) {\n    if (!secret || typeof secret !== 'string') {\n        throw new Error('Cryptr: secret must be a non-0-length string');\n    }\n\n    function getKey(salt) {\n        return crypto.pbkdf2Sync(secret, salt, 100000, 32, 'sha512');\n    }\n\n    this.encrypt = function encrypt(value) {\n        if (value == null) {\n            throw new Error('value must not be null or undefined');\n        }\n\n        const iv = crypto.randomBytes(ivLength);\n        const salt = crypto.randomBytes(saltLength);\n\n        const key = getKey(salt);\n\n        const cipher = crypto.createCipheriv(algorithm, key, iv);\n        const encrypted = Buffer.concat([cipher.update(String(value), 'utf8'), cipher.final()]);\n\n        const tag = cipher.getAuthTag();\n\n        return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');\n    };\n\n    this.decrypt = function decrypt(value) {\n        if (value == null) {\n            throw new Error('value must not be null or undefined');\n        }\n\n        const stringValue = Buffer.from(String(value), 'hex');\n\n        const salt = stringValue.slice(0, saltLength);\n        const iv = stringValue.slice(saltLength, tagPosition);\n        const tag = stringValue.slice(tagPosition, encryptedPosition);\n        const encrypted = stringValue.slice(encryptedPosition);\n\n        const key = getKey(salt);\n\n        const decipher = crypto.createDecipheriv(algorithm, key, iv);\n\n        decipher.setAuthTag(tag);\n\n        return decipher.update(encrypted) + decipher.final('utf8');\n    };\n}\n\nmodule.exports = Cryptr;\n"]},"metadata":{},"sourceType":"script"}